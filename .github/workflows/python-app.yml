name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  CI_JOB_NAME: coverage-test

jobs:
  coverage:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    env:
      GITHUB_JOB_NAME: coverage-test
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run Tests with Coverage
      run: |
        python -m pytest tests/ --cov=./ --cov-report=xml --cov-report=term

    - name: Wait for rate limit
      run: sleep 300

    - name: Upload coverage to Codecov
      uses: actions/github-script@v6
      with:
        script: |
          const maxAttempts = 5;
          const waitTime = 60000; // 60 seconds
          
          for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
              await exec.exec('curl', ['-Os', 'https://uploader.codecov.io/latest/linux/codecov']);
              await exec.exec('chmod', ['+x', 'codecov']);
              await exec.exec('./codecov', ['-f', 'coverage.xml', '-F', 'unittests', '-v']);
              console.log('Successfully uploaded coverage report');
              break;
            } catch (error) {
              if (attempt === maxAttempts) {
                throw error;
              }
              console.log(`Attempt ${attempt} failed. Waiting ${waitTime/1000} seconds before retry...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
          }
